local width, height = client.screen_size()
local center_width = width/2
local center_height = height/2
local choked_ticks = 0
local oldSimTime = 0
local shiftedTicks = 0
local dtap, dtap_key = ui.reference("RAGE", "Other", "Double tap")
local mindmg = ui.reference("rage", "aimbot", "Minimum damage")
local sp_key = ui.reference("rage", "aimbot", "Force safe point")
local fd_key = ui.reference("RAGE", "Other", "Duck peek assist")
local baim_key = ui.reference("RAGE", "Other", "Force body aim")
local alpha = 0
local reduce = false
-----------------
local width, height = client.screen_size()
local center_width = width/2
local center_height = height/2
-- Bar Color
local bar = {
    label = ui.new_label("Lua", "A", "Bar Color"),
    color = ui.new_color_picker("Lua", "A", 'Color Bar', 110, 181, 255, 255),
}
-- Rounding Function
function round(num, numDecimalPlaces)
    local mult = 10^(numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end
local menu = {
    "LUA",
    "A"
}
local indicator_options = {
    "Min Dmg",
    "AA Side",
    "Double tap",
    "Fake duck",
    "Force SP",
    "Force Baim"
}
local label = ui.new_label(menu[1], menu[2], "[Papi] Visuals")
local indic_options = ui.new_multiselect(menu[1], menu[2], "[Papi] Crosshair Indicator options", indicator_options)
local picker = ui.new_color_picker(menu[1], menu[2], "[Papi] color picker", 255, 173, 51, 255)
--- ez of multi select---
    local contains = function(table, value)
        for _, v in ipairs(ui.get(table)) do
            if v == value then return true end
        end
    
        return false
    end
-----------------------------------------------------------------
-- Calc Functions
local clamp_angles = function(angle)
    angle = angle % 360 
    angle = (angle + 360) % 360
    if angle > 180 then
        angle = angle - 360
    end
    return angle
end
--
-- Paint Function
local function on_paint()

    local local_player = entity.get_local_player()
    if not entity.is_alive(local_player) then return end
    local _ , camera = client.camera_angles()
    local _, eyeang = entity.get_prop(local_player, "m_angEyeAngles")
    local _, render = entity.get_prop(local_player, "m_angAbsRotation")
    drawbody = camera - eyeang + 180 
    drawangle = camera - render + 180
    delttest = render - eyeang
    delttest = math.floor(clamp_angles(delttest))
    if delttest > 0 then status = 'RIGHT' elseif delttest < 0 then status = 'LEFT' elseif delttest == 0 then status = 'MIDDLE' end
    if alpha >= 255 then
        reduce = true
    elseif alpha <= 0 and reduce then
        reduce = false
    end
    add = reduce and -0.75 or 0.75
    alpha = alpha + add
    local y_pos = 30
    local r, g, b, a = ui.get(picker)
    -- if none of the other options are enabled then don't draw the revision watermark
    if contains(indic_options, "Min Dmg") or contains(indic_options, "AA Side") or contains(indic_options, "Double tap") or contains(indic_options, "Fake duck") or contains(indic_options, "Force SP") or contains(indic_options, "Force Baim")  then
        y_pos = 30
        renderer.text(center_width, center_height + y_pos, r, g, b, alpha, "bc", 0, 'PAPI YAW')
    end
    if contains(indic_options, "Min Dmg") then
        y_pos = y_pos + 15
        renderer.text(center_width, center_height + y_pos, 51, 194, 255, 255, "bc", 0, ''..ui.get(mindmg))
    end
    
    if contains(indic_options, "AA Side") and ui.get(ui.reference("AA", "Anti-aimbot angles", "Enabled")) then
        y_pos = y_pos + 12
        renderer.text(center_width, center_height+y_pos, 255, 255, 255, 255, "dc-", 0, status)
    end
    if contains(indic_options, "Fake duck") and ui.get(fd_key) then
        y_pos = y_pos + 12
        renderer.text(center_width, center_height+y_pos, 170, 111, 252, 255, "dc-", 0, "FAKE  DUCK")
    end
    if contains(indic_options, "Force SP") and ui.get(sp_key) then
        y_pos = y_pos + 12
        renderer.text(center_width, center_height+y_pos, 2, 156, 91, 255, "dc-", 0, "SAFE  POINT")
    end
    if contains(indic_options, "Force Baim") and ui.get(baim_key) then
        y_pos = y_pos + 12
        renderer.text(center_width, center_height+y_pos, 158, 0, 45, 255, "dc-", 0, "FORCE  BAIM")
    end
    if contains(indic_options, "Double tap") then
        y_pos = y_pos + 12
        if (ui.get(dtap) and ui.get(dtap_key)) then
            if shiftedTicks < 0 then
                renderer.text(center_width, center_height+y_pos, 0, 202, 78, 255, "dc-", 0, 'DOUBLE-TAP  (CHARGED)')
                renderer.circle_outline(center_width+53, center_height+y_pos+1, 0, 0, 0, 255, 5, -90, 1, 3)
                renderer.circle_outline(center_width+53, center_height+y_pos+1, 0, 202, 78, 255, 4, -90, 1, 1)
            else
                renderer.text(center_width, center_height+y_pos, 255, 189, 68, 255, "dc-", 0, 'DOUBLE-TAP  (CHARGING)')
                renderer.circle_outline(center_width+53, center_height+y_pos+1, 0, 0, 0, 255, 5, -90, 1, 3)
                renderer.circle_outline(center_width+53, center_height+y_pos+1, 255, 189, 68, 255, 4, -90, 0.666, 1)
            end
        else
            renderer.text(center_width, center_height+y_pos, 255, 96, 92, 255, "dc-", 0, 'DOUBLE-TAP  (INACTIVE)')
        end
    end  
    y_pos = 0
end
client.set_event_callback('paint', on_paint)
-- UI function
client.set_event_callback("paint_ui", function()
    local active = contains(indic_options, "Min Dmg") or contains(indic_options, "AA Side") or contains(indic_options, "Double tap") or contains(indic_options, "Fake duck") or contains(indic_options, "Force SP") or contains(indic_options, "Force Baim")
    ui.set_visible(picker, active)
end)
-- DT Functions
client.set_event_callback("net_update_start", function()
    tickInt = globals.tickinterval
    tickCount = globals.tickcount 
    simTime = entity.get_prop(entity.get_local_player(), "m_flSimulationTime")
    if simTime ~= nil then
        if oldSimTime ~= simTime then
            shiftedTicks = (simTime/tickInt()) - tickCount()
            oldSimTime = simTime
        end
    end
end)
-- DT Functions END
--- bar 
local function on_paint()
    local local_player = entity.get_local_player()
    if not entity.is_alive(local_player) then return end
    local body_yaw = math.max(-60, math.min(60, round((entity.get_prop(local_player, "m_flPoseParameter", 11) or 0)*120-60+0.5, 1)))
    r, g, b, a = ui.get(bar.color)
    renderer.gradient(center_width, center_height+36, -body_yaw, 3, r, g, b, a, 0, 0, 0, 0, true)
    renderer.gradient(center_width, center_height+36, body_yaw, 3, r, g, b, a, 0, 0, 0, 0, true)
end
client.set_event_callback('paint', on_paint)
-- Choked
client.set_event_callback("setup_command", function(cmd)
    choked_ticks = cmd.chokedcommands/2 > 2 and cmd.chokedcommands or 0 
end)
